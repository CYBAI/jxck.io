{
  "title": "blog.jxck.io",
  "alternate": "https://blog.jxck.io",
  "author": {
    "name": "jxck"
  },
  "id": "tag:blog.jxck.io,2016:feed",
  "update": "2016-01-28T18:30:02Z",
  "entry": [
    {
      "title": "Stale-While-Revalidate ヘッダによるブラウザキャッシュの非同期更新",
      "href": "https://blog.jxck.io/entries/2016-04-16/stale-while-revalidate.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-04-16",
      "updated": "2016-04-16T00:00:00Z",
      "summary": "システムにおいてキャッシュの設計は永遠の課題であり、 Web のパフォーマンスにおいても非常に重要である。\n\nWeb では、 HTTP ヘッダを用いてブラウザやプロキシにキャッシュの制御を指定する。\n\nStale-While-Revalidate ヘッダは、このキャッシュ制御に選択肢を追加する新しい仕様である。\n\nこのヘッダの概要と、本サイトへの適用を解説する。"
    },
    {
      "title": "HTTP Strict Transport Security(HSTS) 対応",
      "href": "https://blog.jxck.io/entries/2016-04-11/strict-transport-security.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-04-11",
      "updated": "2016-04-11T00:00:00Z",
      "summary": "本サイトにて HTTP Strict Transport Security (HSTS) を有効化した。\n\n`includeSubdomains` を用いた `*.jxck.io` 全体への適用および、ブラウザへの Preload 登録も検討したが、本サイトの特性上それは見送った。\n\n導入に必要な設定や、注意点についてまとめる。"
    },
    {
      "title": "Public Key Pinning for HTTP(HPKP) 対応と report-uri.io でのレポート収集",
      "href": "https://blog.jxck.io/entries/2016-04-09/public-key-pinning.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-04-09",
      "updated": "2016-04-09T00:00:00Z",
      "summary": "本サイトにて Public Key Pinning for HTTP を有効化した。\n\n[CSP](https://blog.jxck.io/entries/2016-03-30/content-security-policy.html) 同様、まずは Report-Only を設定し、\nHPKP Report についても、 [report-uri.io](https://report-uri.io) を用いて収集することにした。\n\n導入に必要な設定や、注意点についてまとめる。\n\nなお、本サイトへの導入はあくまで **実験** である。運用や影響も踏まえると、一般サービスへの安易な導入は推奨しない。\n\nまた、本来は HSTS と併用することが推奨されている。(必須ではない)\nそちらも追って対応する予定である。"
    },
    {
      "title": "Content Security Policy(CSP) 対応と report-uri.io でのレポート収集",
      "href": "https://blog.jxck.io/entries/2016-03-30/content-security-policy.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-30",
      "updated": "2016-03-30T00:00:00Z",
      "summary": "本サイトにて Content Security Policy を有効化した。\n\nまずは Report Only にて導入し、段階的にポリシーとコンテンツを修正していく方針をとる。\n\nCSP Report については、 [report-uri.io](https://report-uri.io) を用いて収集することにした。\n\n導入に必要な設定や、注意点についてまとめる。"
    },
    {
      "title": "画像最適化戦略 SVG/Font 編",
      "href": "https://blog.jxck.io/entries/2016-03-27/svg-font-base-ui.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-27",
      "updated": "2016-03-27T00:00:00Z",
      "summary": "本サイトで使用している UI アイコン系の画像を、ギリギリまで最適化した手書き SVG に置き換えた(ただしソースは **観賞用** なので、インデントは残す)。\n\nまた、装飾に画像ではなく CSS の contents を利用することで、ローカルフォントデータを利用し、画像転送を減らす工夫にも言及する。\n\n画像最適化シリーズ第 4 回目のエントリである。\n\n+ [画像最適化戦略 PNG/JEPG 編](/entries/2016-03-24/optimize-image.html)\n+ [画像最適化戦略 Picture 編](/entries/2016-03-25/picture.html)\n+ [画像最適化戦略 WebP 編](/entries/2016-03-26/webp.html)\n+ [&gt; 画像最適化戦略 SVG/Font 編](/entries/2016-03-27/svg-font-base-ui.html)"
    },
    {
      "title": "画像最適化戦略 WebP 編",
      "href": "https://blog.jxck.io/entries/2016-03-26/webp.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-26",
      "updated": "2016-03-26T00:00:00Z",
      "summary": "本サイトの PNG/JPEG で提供している画像については、よりサイズが小さくなりやすい WebP 形式を提供し、対応ブラウザに配布するようにした。\n\nフォーマットを出し分けるため、画像の指定は `&lt;picture&gt;` 要素を用いて対応した。\n\n画像最適化シリーズ第 3 回目のエントリである。\n\n+ [画像最適化戦略 PNG/JEPG 編](/entries/2016-03-24/optimize-image.html)\n+ [画像最適化戦略 Picture 編](/entries/2016-03-25/picture.html)\n+ [&gt; 画像最適化戦略 WebP 編](/entries/2016-03-26/webp.html)\n+ [画像最適化戦略 SVG/Font 編](/entries/2016-03-27/svg-font-base-ui.html)"
    },
    {
      "title": "画像最適化戦略 Picture 編",
      "href": "https://blog.jxck.io/entries/2016-03-25/picture.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-25",
      "updated": "2016-03-25T00:00:00Z",
      "summary": "本サイトで使用している PNG/JPEG 画像を、対応デバイスと、 Device Pixel Ratio に対して最適なサイズで出し分けるために、 `&lt;picture&gt;` 要素を適用した。\n\n画像最適化シリーズ第 2 回目のエントリである。\n\n+ [画像最適化戦略 PNG/JEPG 編](/entries/2016-03-24/optimize-image.html)\n+ [&gt; 画像最適化戦略 Picture 編](/entries/2016-03-25/picture.html)\n+ [画像最適化戦略 WebP 編](/entries/2016-03-26/webp.html)\n+ [画像最適化戦略 SVG/Font 編](/entries/2016-03-27/svg-font-base-ui.html)"
    },
    {
      "title": "画像最適化戦略 PNG/JEPG 編",
      "href": "https://blog.jxck.io/entries/2016-03-24/optimize-image.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-24",
      "updated": "2016-03-24T00:00:00Z",
      "summary": "本サイトで使用している PNG/JPEG 画像に対し、メタデータ削除、減色、リサイズなど基本的な最適化処理の適用戦略と、その方法および結果について。\n\n画像最適化シリーズ第 1 回目のエントリである。\n\n+ [&gt; 画像最適化戦略 PNG/JEPG 編](/entries/2016-03-24/optimize-image.html)\n+ [画像最適化戦略 Picture 編](/entries/2016-03-25/picture.html)\n+ [画像最適化戦略 WebP 編](/entries/2016-03-26/webp.html)\n+ [画像最適化戦略 SVG/Font 編](/entries/2016-03-27/svg-font-base-ui.html)"
    },
    {
      "title": "Noto Sans の Web Font 対応とサブセットによる最適化",
      "href": "https://blog.jxck.io/entries/2016-03-14/web-font-noto-sans.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-14",
      "updated": "2016-03-14T00:00:00Z",
      "summary": "このサイトのフォントに Web Font を適用することにした。\n\nフォントには Google と Adobe が協同で開発した Noto Sans CJK JP を採用した。\n\nまた、このサイトでは使用しないだろう文字を削除したサブセットを作ることで、フォントサイズを最適化した。"
    },
    {
      "title": "Preload を用いたリソースプリローディングの最適化",
      "href": "https://blog.jxck.io/entries/2016-03-04/preload.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-03-04",
      "updated": "2016-03-04T00:00:00Z",
      "summary": "Preload を指定する `&lt;link rel=preload&gt;` の仕様が公開されており、現在 Chrome Canary に実装されている。\n\nこの仕様のモチベーションについて、 Chrome 開発者の Yoav Weiss 氏のブログも公開された。\n\n今回は、この仕様の特徴と用途を解説し、本サイトへの適用について検討する。\n\n\n- [W3C Preload Spec](https://w3c.github.io/preload/)\n- [Intent to Ship: `&lt;link rel=preload&gt;`](https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/_nu6HlbNQfo/XzaLNb1bBgAJ)\n- [Preload: What Is It Good For?](https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/)"
    },
    {
      "title": "JSON-LD と Open Graph で構造化メタデータ対応",
      "href": "https://blog.jxck.io/entries/2016-02-26/jsonld-opengraph.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-26",
      "updated": "2016-02-26T00:00:00Z",
      "summary": "本サイトのメタ情報を整理するため、 HTML のメタタグの整理、 JSON-LD による schema.org 対応、 Facebook, Twitter を主とした Open Graph 対応を実施した。\n\nこれにより、既にAMP 対応していた本サイトが、 Google のモバイル検索でキャッシュの対象となる(クロール待ち)。"
    },
    {
      "title": "zopfli で静的コンテンツの gzip 配信と Content/Transfer-Encoding について",
      "href": "https://blog.jxck.io/entries/2016-02-17/content-encoding-zopfli.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-17",
      "updated": "2016-02-17T00:00:00Z",
      "summary": "HTTP では `Accept-Encoding` と `Content-Encoding` でのネゴシエーションにより、 gz などで圧縮したコンテンツを転送することができる。本サイトでは zopfli を用いて gzip 形式の配信に対応した。"
    },
    {
      "title": "HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について",
      "href": "https://blog.jxck.io/entries/2016-02-15/loading-css-over-http2.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-15",
      "updated": "2016-02-15T00:00:00Z",
      "summary": "Chrome が予定している `&lt;link rel=stylesheet&gt;` の挙動の変更について、Google Chrome チームの Jake が、興味深いブログを上げている。\n\n[The future of loading CSS](https://jakearchibald.com/2016/link-in-body/)\n\nこの内容は、単に Chrome に対する変更だけではなく、 HTTP2 によって変化する最適化手法と、それを最も活かすための HTML, CSS の構成についてのヒントがある。\n\n今回は、この内容を意訳+補足解説し、本サイトに適用していく。"
    },
    {
      "title": "Resource Hints API でリソースの投機的取得",
      "href": "https://blog.jxck.io/entries/2016-02-11/resource-hints.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-11",
      "updated": "2016-02-11T00:00:00Z",
      "summary": "Resource Hints とは現在提案されている以下のドラフトであり、ブラウザに「次に必要となるリソースを教える」ことで、投機的な取得を行う API 群である。\n\n[https://w3c.github.io/resource-hints/](https://w3c.github.io/resource-hints/)\n\n主に以下がある。\n\n- [dns-prefetch](https://w3c.github.io/resource-hints/#dfn-dns-prefetch)\n- [preconnect](https://w3c.github.io/resource-hints/#dfn-preconnect)\n- [prefetch](https://w3c.github.io/resource-hints/#dfn-prefetch)\n- [prerender](https://w3c.github.io/resource-hints/#dfn-prerender)\n\n今回は本サイトでこれを適用した話。"
    },
    {
      "title": "Atom の RSS Feed 対応",
      "href": "https://blog.jxck.io/entries/2016-02-09/atom-feed.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-09",
      "updated": "2016-02-09T00:00:00Z",
      "summary": "このブログの Atom feed を吐くようにした。\n\n右上の [feed アイコン](//blog.jxck.io/feeds/atom.xml) から登録できる。"
    },
    {
      "title": "h2o で https/2 のデプロイと設定",
      "href": "https://blog.jxck.io/entries/2016-02-08/h2o-http2-deploy.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-08",
      "updated": "2016-02-08T00:00:00Z",
      "summary": "土台がだいたいできたので、このサイトを h2o にデプロイした話。"
    },
    {
      "title": "AMP HTML 対応",
      "href": "https://blog.jxck.io/entries/2016-02-01/amp-html.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-02-01",
      "updated": "2016-02-01T00:00:00Z",
      "summary": "Google が推奨する仕様である [AMP HTML](https://www.ampproject.org/) に、このブログを対応した。\n\n言いたいことは色々あるが、とりあえず非常に難しかったため、その対応方法や感想などを残す。"
    },
    {
      "title": "HTML の省略によるサイズ最適化",
      "href": "https://blog.jxck.io/entries/2016-01-28/html-compression.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-01-28",
      "updated": "2016-01-28T00:00:00Z",
      "summary": "本サイト [blog.jxck.io](https://blog.jxck.io) 以下については、 Markdown から静的ファイルを生成するスタイルで作成している。\n\nこの変換時に以前から思っていた **HTML の最適化** を実施することにした。\n\nしかし、 md-&gt;html 変換時にそれができるツールが見当たらないため、 Markdown の AST から HTML を構築する過程で、省略を施すスクリプトを自作した。\n\nただし、ソースはあくまで観賞用なので、インデントやコメントは残している。\n\nチューニングではなく単なる実験としてサイト全体にこれを適用し、その結果を記す。"
    },
    {
      "title": "Blog を移転しました",
      "href": "https://blog.jxck.io/entries/2016-01-27/new-blog-start.html",
      "id": "tag:blog.jxck.io,2016:entry://2016-01-27",
      "updated": "2016-01-27T00:00:00Z",
      "summary": "長いこと [はてな](http://jxck.hatenablog.com/) をメインにし、他にも [Qiita](http://qiita.com/jxck_) や [Tumblr](http://jxck.tumblr.com/) を使って色々書いて来たが、そろそろ自分のドメインに全部集約していこうかと思う。"
    }
  ]
}