<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns='http://www.w3.org/2005/Atom' xml:lang='ja'>
<title>blog.jxck.io</title>
<link rel="alternate" href="https://blog.jxck.io/"/>
<link rel="self" type="application/atom+xml" href="https://blog.jxck.io/feeds/atom.xml"/>
<author><name>Jxck</name></author>
<id>tag:blog.jxck.io,2016:feed</id>
<updated>2016-01-28T18:30:02Z</updated>

  <entry>
   <title>「Socket.IO は必要か?」または「WebSocket は通るのか?」問題について 2016 年版</title>
   <link href="https://blog.jxck.io/entries/2016-08-22/websocket-connectivity.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-08-22</id>
   <updated>2016-08-22T00:00:00Z</updated>
   <summary>「Socket.IO 使ったほうがいいですか?」 という主旨の質問をもらった。

これは、 WebSocket が繋がらない環境に向けて、フォールバック機能を有する Socket.IO にしておいた方が良いのかという意味である。

WebSocket が出てきた当初と比べて、 Web を取り巻く状況は変わったが、変わってないところもある。

念のためと Socket.IO を使うのもよいが、「本当に必要なのか」を問うのは重要である。

Rails も ActionCable で WebSocket に対応し、ユーザも増えるかもしれないことも踏まえ、

ここで、もう一度現状について、把握している範囲で解説しておく。</summary>
  </entry>

  <entry>
   <title>SQL でファイル検索するコマンド selects を書いた話</title>
   <link href="https://blog.jxck.io/entries/2016-08-05/sql-for-file-search.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-08-05</id>
   <updated>2016-08-05T00:00:00Z</updated>
   <summary>UNIX コマンドを SQL で抽出できるツール qq を作った。 というエントリを読んで、そういえば似たようなものを作ってたなと思い出した。

自分の dotfiles の中にある、便利コマンド集の中にある selects についてである。

このコマンドは SQL という検索を記述的に表現する共通言語をファイル検索に応用し、 Ruby の動的言語として表現力を使って実装したものといえる。

その実装方法と実行例などについて記す。</summary>
  </entry>

  <entry>
   <title>Fetch での Stream を用いたプログレス取得とキャンセル</title>
   <link href="https://blog.jxck.io/entries/2016-07-21/fetch-progress-cancel.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-07-21</id>
   <updated>2016-07-21T00:00:00Z</updated>
   <summary>WHATWG が定義する Fetch API は、出たばかりの仕様では、途中でのキャンセルや、プログレスイベントの取得が含まれていなかった。

しかし、後の更新で fetch 結果の Response Body が WHATWG Stream API を実装することになったため、現在の仕様ではプログレスを取ることもキャンセルをすることも可能となっている。

今回は、こうした API のアップデートについて記す。</summary>
  </entry>

  <entry>
   <title>Cache-Control の Immutable 拡張によるリロード時のキャッシュ最適化</title>
   <link href="https://blog.jxck.io/entries/2016-07-12/cache-control-immutable.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-07-12</id>
   <updated>2016-07-12T00:00:00Z</updated>
   <summary>ブラウザはリロード時に、 max-age に満たないキャッシュを持っていても Conditional GET によってキャッシュの Validate (有効性の問い合わせ)を行う。

Cache-Control Extension として提案されている Immutable 拡張は、キャッシュが max-age 内であればリロード時もキャッシュヒットさせる拡張である。

このヘッダの効果と、本サイトへの適用について記す。</summary>
  </entry>

  <entry>
   <title>Intersection Observer を用いた要素出現検出の最適化</title>
   <link href="https://blog.jxck.io/entries/2016-06-25/intersection-observer.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-06-25</id>
   <updated>2016-06-25T00:00:00Z</updated>
   <summary>スクロールによる DOM 要素の出現などを効率よく検知するため、新しく Intersection Observer という API が追加された。

この API の使い方と、本サイトへの適用について記す。</summary>
  </entry>

  <entry>
   <title>mozaic.fm の v2 のリリースと Podcast の実装と移行</title>
   <link href="https://blog.jxck.io/entries/2016-06-20/mozaicfm-v2.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-06-20</id>
   <updated>2016-06-20T00:00:00Z</updated>
   <summary>mozaic.fm をリニューアルし、 v2 としてリリースした。

今回の更新のモチベーションは大きく分けて 2 つある。

- tumblr を捨てたかった
- feedburner を捨てたかった

これによる breaking change 含む変更の内容と、実装のメモを記す。</summary>
  </entry>

  <entry>
   <title>リンクのへの rel=noopener 付与による Tabnabbing 対策</title>
   <link href="https://blog.jxck.io/entries/2016-06-12/noopener.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-06-12</id>
   <updated>2016-06-12T00:00:00Z</updated>
   <summary>本サイト以下全ての `target=_blank` 付きのリンクに `rel=&quot;noopener noreferrer&quot;` の付与を実施した。

このプロパティの意味と、これが無い場合のフィッシング詐欺攻撃の可能性について解説する。</summary>
  </entry>

  <entry>
   <title>Passive Event Listeners によるスクロールの改善</title>
   <link href="https://blog.jxck.io/entries/2016-06-09/passive-event-listeners.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-06-09</id>
   <updated>2016-06-09T00:00:00Z</updated>
   <summary>DOM のイベントリスナの仕様に Passive Event Listeners というオプションが追加された。

このオプションは、主にモバイルなどでのスクロールの詰まり(Scroll Jank) を解決するために導入されたものである。

今回は、この仕様が解決する問題と、本サイトへの適用を解説する。

Passive Event Listeners Spec</summary>
  </entry>

  <entry>
   <title>中級者向け Service Worker Tutorial</title>
   <link href="https://blog.jxck.io/entries/2016-04-24/service-worker-tutorial.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-04-24</id>
   <updated>2016-04-24T00:00:00Z</updated>
   <summary>Service Worker の初心者向けのチュートリアルや、使ってみた系のエントリも増えてきました。
しかし、 Service Worker は通常のブラウザ用 JS の開発と少し経路が違い、慣れるまで開発やデバッグもなかなか難しいと思います。

そこで特に難しい部分、そして分かっていないと実際にデプロイした際に難しいと思う部分について、実際に動きを確認しながら解説したいと思います。

なお、 Service Worker の基本的な概念などについては、他のチュートリアルなどを見て理解している前提で進めます。

思いつきで撮ったので色々ミスも有ります、また Chrome Dev Tools の UI はどうせ変わるのでそのつもりで見てください。

TODO になっている動画は、そのうち撮って追加します。</summary>
  </entry>

  <entry>
   <title>Stale-While-Revalidate ヘッダによるブラウザキャッシュの非同期更新</title>
   <link href="https://blog.jxck.io/entries/2016-04-16/stale-while-revalidate.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-04-16</id>
   <updated>2016-04-16T00:00:00Z</updated>
   <summary>システムにおいてキャッシュの設計は永遠の課題であり、 Web のパフォーマンスにおいても非常に重要である。

Web では、 HTTP ヘッダを用いてブラウザやプロキシにキャッシュの制御を指定する。

Stale-While-Revalidate ヘッダは、このキャッシュ制御に選択肢を追加する新しい仕様である。

このヘッダの概要と、本サイトへの適用を解説する。</summary>
  </entry>

  <entry>
   <title>HTTP Strict Transport Security(HSTS) 対応</title>
   <link href="https://blog.jxck.io/entries/2016-04-11/strict-transport-security.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-04-11</id>
   <updated>2016-04-11T00:00:00Z</updated>
   <summary>本サイトにて HTTP Strict Transport Security (HSTS) を有効化した。

`includeSubdomains` を用いた `*.jxck.io` 全体への適用および、ブラウザへの Preload 登録も検討したが、本サイトの特性上それは見送った。

導入に必要な設定や、注意点についてまとめる。</summary>
  </entry>

  <entry>
   <title>Public Key Pinning for HTTP(HPKP) 対応と report-uri.io でのレポート収集</title>
   <link href="https://blog.jxck.io/entries/2016-04-09/public-key-pinning.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-04-09</id>
   <updated>2016-04-09T00:00:00Z</updated>
   <summary>本サイトにて Public Key Pinning for HTTP を有効化した。

CSP 同様、まずは Report-Only を設定し、
HPKP Report についても、 report-uri.io を用いて収集することにした。

導入に必要な設定や、注意点についてまとめる。

なお、本サイトへの導入はあくまで **実験** である。運用や影響も踏まえると、一般サービスへの安易な導入は推奨しない。

また、本来は HSTS と併用することが推奨されている。(必須ではない)
そちらも追って対応する予定である。</summary>
  </entry>

  <entry>
   <title>Content Security Policy(CSP) 対応と report-uri.io でのレポート収集</title>
   <link href="https://blog.jxck.io/entries/2016-03-30/content-security-policy.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-30</id>
   <updated>2016-03-30T00:00:00Z</updated>
   <summary>本サイトにて Content Security Policy を有効化した。

まずは Report Only にて導入し、段階的にポリシーとコンテンツを修正していく方針をとる。

CSP Report については、 report-uri.io を用いて収集することにした。

導入に必要な設定や、注意点についてまとめる。</summary>
  </entry>

  <entry>
   <title>画像最適化戦略 SVG/Font 編</title>
   <link href="https://blog.jxck.io/entries/2016-03-27/svg-font-base-ui.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-27</id>
   <updated>2016-03-27T00:00:00Z</updated>
   <summary>本サイトで使用している UI アイコン系の画像を、ギリギリまで最適化した手書き SVG に置き換えた(ただしソースは **観賞用** なので、インデントは残す)。

また、装飾に画像ではなく CSS の contents を利用することで、ローカルフォントデータを利用し、画像転送を減らす工夫にも言及する。

画像最適化シリーズ第 4 回目のエントリである。

+ 画像最適化戦略 PNG/JEPG 編
+ 画像最適化戦略 Picture 編
+ 画像最適化戦略 WebP 編
+ &gt; 画像最適化戦略 SVG/Font 編</summary>
  </entry>

  <entry>
   <title>画像最適化戦略 WebP 編</title>
   <link href="https://blog.jxck.io/entries/2016-03-26/webp.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-26</id>
   <updated>2016-03-26T00:00:00Z</updated>
   <summary>本サイトの PNG/JPEG で提供している画像については、よりサイズが小さくなりやすい WebP 形式を提供し、対応ブラウザに配布するようにした。

フォーマットを出し分けるため、画像の指定は `&lt;picture&gt;` 要素を用いて対応した。

画像最適化シリーズ第 3 回目のエントリである。

+ 画像最適化戦略 PNG/JEPG 編
+ 画像最適化戦略 Picture 編
+ &gt; 画像最適化戦略 WebP 編
+ 画像最適化戦略 SVG/Font 編</summary>
  </entry>

  <entry>
   <title>画像最適化戦略 Picture 編</title>
   <link href="https://blog.jxck.io/entries/2016-03-25/picture.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-25</id>
   <updated>2016-03-25T00:00:00Z</updated>
   <summary>本サイトで使用している PNG/JPEG 画像を、対応デバイスと、 Device Pixel Ratio に対して最適なサイズで出し分けるために、 `&lt;picture&gt;` 要素を適用した。

画像最適化シリーズ第 2 回目のエントリである。

+ 画像最適化戦略 PNG/JEPG 編
+ &gt; 画像最適化戦略 Picture 編
+ 画像最適化戦略 WebP 編
+ 画像最適化戦略 SVG/Font 編</summary>
  </entry>

  <entry>
   <title>画像最適化戦略 PNG/JEPG 編</title>
   <link href="https://blog.jxck.io/entries/2016-03-24/optimize-image.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-24</id>
   <updated>2016-03-24T00:00:00Z</updated>
   <summary>本サイトで使用している PNG/JPEG 画像に対し、メタデータ削除、減色、リサイズなど基本的な最適化処理の適用戦略と、その方法および結果について。

画像最適化シリーズ第 1 回目のエントリである。

+ &gt; 画像最適化戦略 PNG/JEPG 編
+ 画像最適化戦略 Picture 編
+ 画像最適化戦略 WebP 編
+ 画像最適化戦略 SVG/Font 編</summary>
  </entry>

  <entry>
   <title>Noto Sans の Web Font 対応とサブセットによる最適化</title>
   <link href="https://blog.jxck.io/entries/2016-03-14/web-font-noto-sans.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-14</id>
   <updated>2016-03-14T00:00:00Z</updated>
   <summary>このサイトのフォントに Web Font を適用することにした。

フォントには Google と Adobe が協同で開発した Noto Sans CJK JP を採用した。

また、このサイトでは使用しないだろう文字を削除したサブセットを作ることで、フォントサイズを最適化した。</summary>
  </entry>

  <entry>
   <title>Preload を用いたリソースプリローディングの最適化</title>
   <link href="https://blog.jxck.io/entries/2016-03-04/preload.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-03-04</id>
   <updated>2016-03-04T00:00:00Z</updated>
   <summary>Preload を指定する `&lt;link rel=preload&gt;` の仕様が公開されており、現在 Chrome Canary に実装されている。

この仕様のモチベーションについて、 Chrome 開発者の Yoav Weiss 氏のブログも公開された。

今回は、この仕様の特徴と用途を解説し、本サイトへの適用について検討する。


- W3C Preload Spec
- Intent to Ship: `&lt;link rel=preload&gt;`
- Preload: What Is It Good For?</summary>
  </entry>

  <entry>
   <title>JSON-LD と Open Graph で構造化メタデータ対応</title>
   <link href="https://blog.jxck.io/entries/2016-02-26/jsonld-opengraph.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-26</id>
   <updated>2016-02-26T00:00:00Z</updated>
   <summary>本サイトのメタ情報を整理するため、 HTML のメタタグの整理、 JSON-LD による schema.org 対応、 Facebook, Twitter を主とした Open Graph 対応を実施した。

これにより、既に AMP 対応していた本サイトが、 Google のモバイル検索でキャッシュの対象となる(クロール待ち)。</summary>
  </entry>

  <entry>
   <title>zopfli で静的コンテンツの gzip 配信と Content/Transfer-Encoding について</title>
   <link href="https://blog.jxck.io/entries/2016-02-17/content-encoding-zopfli.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-17</id>
   <updated>2016-02-17T00:00:00Z</updated>
   <summary>HTTP では `Accept-Encoding` と `Content-Encoding` でのネゴシエーションにより、 gz などで圧縮したコンテンツを転送することができる。本サイトでは zopfli を用いて gzip 形式の配信に対応した。</summary>
  </entry>

  <entry>
   <title>HTTP2 を前提とした HTML+CSS コンポーネントのレンダリングパス最適化について</title>
   <link href="https://blog.jxck.io/entries/2016-02-15/loading-css-over-http2.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-15</id>
   <updated>2016-02-15T00:00:00Z</updated>
   <summary>Chrome が予定している `&lt;link rel=stylesheet&gt;` の挙動の変更について、 Google Chrome チームの Jake が、興味深いブログを上げている。

The future of loading CSS

この内容は、単に Chrome に対する変更だけではなく、 HTTP2 によって変化する最適化手法と、それを最も活かすための HTML, CSS の構成についてのヒントがある。

今回は、この内容を意訳+補足解説し、本サイトに適用していく。</summary>
  </entry>

  <entry>
   <title>Resource Hints API でリソースの投機的取得</title>
   <link href="https://blog.jxck.io/entries/2016-02-11/resource-hints.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-11</id>
   <updated>2016-02-11T00:00:00Z</updated>
   <summary>Resource Hints とは現在提案されている以下のドラフトであり、ブラウザに「次に必要となるリソースを教える」ことで、投機的な取得を行う API 群である。

https://w3c.github.io/resource-hints/

主に以下がある。

- dns-prefetch
- preconnect
- prefetch
- prerender

今回は本サイトでこれを適用した話。</summary>
  </entry>

  <entry>
   <title>Atom の RSS Feed 対応</title>
   <link href="https://blog.jxck.io/entries/2016-02-09/atom-feed.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-09</id>
   <updated>2016-02-09T00:00:00Z</updated>
   <summary>このブログの Atom feed を吐くようにした。

右上の feed アイコン から登録できる。</summary>
  </entry>

  <entry>
   <title>h2o で https/2 のデプロイと設定</title>
   <link href="https://blog.jxck.io/entries/2016-02-08/h2o-http2-deploy.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-08</id>
   <updated>2016-02-08T00:00:00Z</updated>
   <summary>土台がだいたいできたので、このサイトを h2o にデプロイした話。</summary>
  </entry>

  <entry>
   <title>AMP HTML 対応</title>
   <link href="https://blog.jxck.io/entries/2016-02-01/amp-html.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-02-01</id>
   <updated>2016-02-01T00:00:00Z</updated>
   <summary>Google が推奨する仕様である AMP HTML に、このブログを対応した。

言いたいことは色々あるが、とりあえず非常に難しかったため、その対応方法や感想などを残す。</summary>
  </entry>

  <entry>
   <title>HTML の省略によるサイズ最適化</title>
   <link href="https://blog.jxck.io/entries/2016-01-28/html-compression.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-01-28</id>
   <updated>2016-01-28T00:00:00Z</updated>
   <summary>本サイト blog.jxck.io 以下については、 Markdown から静的ファイルを生成するスタイルで作成している。

この変換時に以前から思っていた **HTML の最適化** を実施することにした。

しかし、 md-&gt;html 変換時にそれをできるツールが見当たらないため、 Markdown の AST から HTML を構築する過程で、省略を施すスクリプトを自作した。

ただし、ソースはあくまで観賞用なので、インデントやコメントは残している。

チューニングではなく単なる実験としてサイト全体にこれを適用し、その結果を記す。</summary>
  </entry>

  <entry>
   <title>Blog を移転しました</title>
   <link href="https://blog.jxck.io/entries/2016-01-27/new-blog-start.html" rel="alternate" />
   <id>tag:blog.jxck.io,2016:entry://2016-01-27</id>
   <updated>2016-01-27T00:00:00Z</updated>
   <summary>長いこと はてな をメインにし、他にも Qiita や Tumblr を使って色々書いて来たが、そろそろ自分のドメインに全部集約していこうかと思う。</summary>
  </entry>

</feed>
